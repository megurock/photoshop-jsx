/* <javascriptresource><name>レイヤー（セット）を検索</name><category>net.megrock.ps</category></javascriptresource>*///@include "../xlib/stdlib.js" var doc = activeDocument,	res = "dialog { swf: FlashPlayer { preferredSize: [ 430, 145 ] } }",	win = new Window(res, "レイヤー（セット）を検索"),	layers = null,	layerSets = null,	shouldSearchLayer = true,	shouldSearchLayerSet = true,	regex = null,	returnList = [];/** * */function searchLayers(layers) {	for (var i = 0, len = layers.length; i < len; i++) {		var layer = layers[i];		if (shouldSearchLayer) {			isMatch(layer);		}	}}/** * */function searchLayerSets(layerSets) {	for (var i = 0, len = layerSets.length; i < len; i++) {		var layerSet = layerSets[i],			layerSetList = layerSet.layerSets,			layerList = layerSet.artLayers;		if (shouldSearchLayerSet) {			isMatch(layerSet);		}		if (layerSetList) {			searchLayerSets(layerSetList);		}		if (layerList) {			searchLayers(layerList);		}	}}/** * */function selectTarget() {	if (returnList.length) {		Stdlib.selectLayers(doc, returnList, false);	}	exitApp();}/** * */function exitApp() {	try {		win.close();	} catch(error) {}}/* * */function isMatch(layer) {	if (regex.test(layer.name)) {		returnList.push(layer);	}}/** * */function whereAmI(){	var where;	try {		app.documents.test();	} catch (err){		where = File(err.fileName);	}	return where.path;}/** * @param chars:String				the characters to search * @param selectedIndex:int			combobox value * @param searchLayer:Boolean		whether layers will be included for search target * @param searchLayerSet:Boolean	whether layerSets will be included for search target */function search(chars, selectedIndex, searchLayer, searchLayerSet) {	// set values from ui	searchChars = chars;	searchMethod = selectedIndex;	shouldSearchLayer = searchLayer;	shouldSearchLayerSet = searchLayerSet;	if (searchChars) {		// deselect selected layers		var selectedLayers = Stdlib.getSelectedLayers(doc);		for (var i = 0, len = selectedLayers.length; i < len; i++) {			var selectedLayer = selectedLayers[i],				index = Stdlib.getLayerIndex(doc, selectedLayer);			Stdlib.deselectLayerByIndex(doc, index);		}		// create regular expression		switch (searchMethod) {			// has seachChars in line head			case 1:				regex = new RegExp('^' + searchChars);				break;			// has seachChars in line end			case 2:				regex = new RegExp(searchChars + '$');				break;			// use input word as regular expression			case 3:				regex = new RegExp(searchChars);				break;			// has searchChars anywhere			default:				regex = new RegExp(searchChars);				break;		}		// search		layers = layers || doc.artLayers;		layerSets = layerSets || doc.layerSets;		if (layerSets) {			searchLayerSets(layerSets);		}		if (layers) {			searchLayers(layers);		}		selectTarget();	}}/** * */win.onShow = function(event) {	var myJSXPath = whereAmI();	var mySWFFile = myJSXPath + "/searchUI.swf";	var movieToPlay = new File(mySWFFile);	var swf = this.swf;	try {		swf.loadMovie(movieToPlay);		swf.exitApp = exitApp;		swf.search = search;	} catch (error) {		alert(mySWFFile + "の読込みに失敗しました。");	}};/** * */function init(msg, defaultChars) {	win.margins = [0,0,0,0];	win.show();}init();